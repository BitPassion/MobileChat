@page "/signup"

@using FluentValidation
@using JihadKhawaja.SignalR.Client.Chat.Interfaces
@using JihadKhawaja.SignalR.Client.Chat.Models
@using System.Text.RegularExpressions
@inject IChat ChatService
@inject NavigationManager NavigationManager

<MudText GutterBottom Color="Color.Secondary">Sign Up</MudText>
<MudText>Already have an account? <span><MudButton Link="signin">Sign In</MudButton></span></MudText>

<MudGrid Class="mt-8" Justify="Justify.FlexStart">
    <MudItem xs="12" sm="8" md="6">
        <MudCard Elevation="25" Class="rounded-lg pb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Align="Align.Center">Create Account</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudForm Model="@model" @ref="@form" Validation="@(UserValidator.ValidateValue)" ValidationDelay="0">
                    <MudTextField @bind-Value="model.DisplayName"
                                  For="@(() => model.DisplayName)"
                                  Immediate="true"
                                  Label="Display Name" InputType="InputType.Text" />

                    <MudTextField @bind-Value="model.Username"
                                  For="@(() => model.Username)"
                                  Immediate="true"
                                  Label="Username" ErrorText="Invalid username." />

                    <MudTextField @bind-Value="model.Password"
                                  For="@(() => model.Password)"
                                  Immediate="true"
                                  T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!" />

                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))" />

                </MudForm>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-center">
                <MudButton OnClick="Submit" Disabled=@IsBusy ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width:50%;">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;

    UserFluentValidator UserValidator;

    MudTextField<string> pwField1;
    User model = new User();
    bool IsBusy = false;

    protected override void OnInitialized()
    {
        UserValidator = new UserFluentValidator(ChatService);

        base.OnInitialized();
    }

    private async Task Submit()
    {
        IsBusy = true;

        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please be sure to fill all fields.", MudBlazor.Severity.Error);
            IsBusy = false;
            return;
        }

        User user = new User
            {
                Id = Guid.NewGuid(),
                DisplayName = model.DisplayName,
                Email = model.Email.ToLower(),
                Password = model.Password,
                Permission = 0,
                DateCreated = DateTime.UtcNow,
            };

        KeyValuePair<Guid, bool> values = await ChatService.SignUp(user.DisplayName, user.Username, user.Email, user.Password);

        //create user
        if (values.Value)
        {
            Snackbar.Add("User Created.", MudBlazor.Severity.Success);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Failed to sign in, Please try again", MudBlazor.Severity.Error);
        }

        IsBusy = false;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    public class UserFluentValidator : AbstractValidator<User>
    {
        private readonly IChat ChatService;
        public UserFluentValidator(IChat ChatService)
        {
            this.ChatService = ChatService;

            RuleFor(x => x.DisplayName)
                .NotEmpty()
                .Length(3, 100);

            RuleFor(x => x.Username)
                .Cascade(CascadeMode.Stop)
                .NotEmpty();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<User>.CreateWithOptions((User)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
