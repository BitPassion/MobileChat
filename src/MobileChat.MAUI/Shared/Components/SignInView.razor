@page "/signin"

@using FluentValidation
@using System.Text.RegularExpressions
@using MobileChat.Client.Interfaces
@using MobileChat.MAUI.Helpers
@using MobileChat.MAUI.Interfaces
@using MobileChat.Shared.Models
@inject ISaveFile SaveFileService
@inject IChat ChatService
@inject NavigationManager NavigationManager

<MudText GutterBottom Color="Color.Secondary">Sign In</MudText>
<MudText>Don't have an account? <span><MudButton Link="signup">Sign Up</MudButton></span></MudText>

<MudGrid Class="mt-8" Justify="Justify.FlexStart">
    <MudItem xs="12" sm="8" md="6">
        <MudCard Elevation="25" Class="rounded-lg pb-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Align="Align.Start">Log in Account</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudForm @ref="@form" ValidationDelay="0">
                    <MudTextField @bind-Value="@EmailOrUsername"
                                Immediate="true"
                                Required="true"
                                Validation="@(new Func<string, IEnumerable<string>>(NotEmpty))"
                                Label="Email or Username" />

                    <MudTextField @bind-Value="@Password"
                                Immediate="true"
                                Required="true"
                                Validation="@(new Func<string, IEnumerable<string>>(NotEmpty))"
                                Label="Password" InputType="InputType.Password" />
                </MudForm>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-center">
                <MudButton OnClick="Submit" Disabled=@IsBusy ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" Style="width:50%;">Submit</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    [Inject] ISnackbar Snackbar { get; set; }
    MudForm form;

    string EmailOrUsername { get; set; }
    string Password { get; set; }
    bool IsBusy = false;

    private IEnumerable<string> NotEmpty(string text)
    {
        if (string.IsNullOrWhiteSpace(text))
        {
            yield return "Field is required!";
            yield break;
        }
    }

    private async Task Submit()
    {
        IsBusy = true;

        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please be sure to fill all fields.", MudBlazor.Severity.Error);
            IsBusy = false;
            return;
        }

        KeyValuePair<Guid, bool> values = await ChatService.SignIn(EmailOrUsername, Password);

        //check user
        if (values.Value)
        {
            User user = new()
            {
                Id = values.Key,
                Password = Password
            };

            if (PatternMatchHelper.IsEmail(EmailOrUsername))
            {
                user.Email = EmailOrUsername;
            }
            else
            {
                user.Username = EmailOrUsername;
            };

            string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Mobile Chat");
            SaveFileService.CreateDirectory(path);
            SaveFileService.WriteToJsonFile<User>("user.json", path, user);

            Snackbar.Add("User Created.", MudBlazor.Severity.Success);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Add("Failed to sign in, Please try again", MudBlazor.Severity.Error);
        }

        IsBusy = false;
    }
}
