@page "/chat/{ChannelId}/{Title}"

@using JihadKhawaja.SignalR.Client.Chat.Interfaces
@using JihadKhawaja.SignalR.Client.Chat.Models
@using MobileChat.MAUI.Interfaces
@using MobileChat.MAUI.Shared.Components
@inject NavigationManager NavigationManager
@inject ISaveFile SaveFileService
@inject IChat ChatService

<MudText Typo="Typo.h3" GutterBottom>@Title</MudText>
<MudText Typo="Typo.h6" GutterBottom>Current Channel @ChannelId</MudText>

<MudGrid>
    <MudItem xs="12" md=12>
        <MudPaper Height="400px" Elevation="0" Class="pa-4" Style="overflow:auto;">
            @if (Messages.Count() == 0)
            {
                <MudText>No Messages</MudText>
            }
            else
            {
                <MudStack>
                    @foreach (var message in Messages)
                    {
                        <MessageView DisplayName="@message.DisplayName" Content="@message.Content" />
                    }
                </MudStack>
            }
        </MudPaper>
    </MudItem>
    <MudItem xs="12" md=12>
        <MudStack Row>
            <MudTextField @bind-Value="InputContent" Label="Your message here" Variant="Variant.Filled" />
            <MudIconButton Icon="@Icons.Filled.Send" Variant="Variant.Filled" DisableElevation Class="mt-1"
            OnClick="SendMessage"/>
        </MudStack>
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string ChannelId { get; set; }

    private List<Message> Messages { get; set; }

    private string InputContent { get; set; }

    private User CurrentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "Mobile Chat");
        CurrentUser = SaveFileService.ReadFromJsonFile<User>("user.json", path);

        Messages = new();

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Messages = (await GetMessages()).ToList();

            await InvokeAsync(StateHasChanged);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Guid GetChannelId()
    {
        Guid id;
        if(Guid.TryParse(ChannelId, out id))
        {
            return id;
        }

        return Guid.Empty;
    }

    private async Task<Message[]> GetMessages()
    {
        return await ChatService.ReceiveMessageHistory(GetChannelId());
    }

    private async Task SendMessage()
    {
        Message message = new()
        {
            Id = Guid.NewGuid(),
            ChannelId = GetChannelId(),
            Content = InputContent,
            SenderId = CurrentUser.Id,
            DateCreated = DateTime.UtcNow,
            DateSent = DateTime.UtcNow,
            DisplayName = CurrentUser.DisplayName,
        };

        await ChatService.SendMessage(message);

        Messages.Add(message);
    }
}
